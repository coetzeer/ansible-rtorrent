# rtorrent startup script
# requires upstart v1.4 or newer

description "rTorrent - BitTorrent client"

setuid {{ run_user }}
setgid {{ run_user }}
env RTORRENTRC=/etc/rtorrent/rtorrent.rc

start on (  local-filesystems
            and net-device-up IFACE=eth0
            and stopped rc)
stop on runlevel [!2345]

respawn

# "setsid screen -Dm" only forks once
expect fork

pre-start script
  # check for configuration and session directory

  # check for rtorrent.rc
  if [ -f ${RTORRENTRC} ]; then
    # check config for session directory
    SESSION_DIR=$(sed -n 's/^[[:space:]]*session[[:space:]]*=[[:space:]]*\(.*\)$/\1/p' ${RTORRENTRC})
    if [ -z ${SESSION_DIR} ]; then
      echo "ERROR: session directory not configured!"
      exit 1
    else
      # make sure directory exists
      mkdir -p ${SESSION_DIR}
    fi

    # check config for session.lock.set
    USE_LOCK=$(sed -n 's/^[[:space:]]*session\.use_lock.set[[:space:]]*=[[:space:]]*\(.*\)$/\1/p' ${RTORRENTRC})
    if [ "x$USE_LOCK" != "xyes" ]; then
      echo "WARNING: for proper service control add this to rtorrent.rc: session.use_lock.set = yes"
    fi
  else
    # won't try to start without config
    echo "ERROR: ${RTORRENTRC} not found!"
    exit 1
  fi
end script

# using setsid to avoid screen complaining about /var/run/screen permissions
# invoking interactive shell after clean rtorrent shutdown to avoid immediate
# termination of screen (stop command would end up in respawn-loop otherwise)
exec setsid screen -Dm -S rtorrent sh -c 'rtorrent -n -o import=${RTORRENTRC} && exec sh'

pre-stop script
  # stop rtorrent instance gracefully before upstart stop command kills the screen session

  # get session directory
  # as we're already running, there's no need to do all the sanity checks again
  SESSION_DIR=$(sed -n 's/^[[:space:]]*session[[:space:]]*=[[:space:]]*\(.*\)$/\1/p' ${RTORRENTRC})

  # now, if we have a pid file, we can perform a clean shutdown
  if [ -f ${SESSION_DIR}/rtorrent.lock ]; then
    RT_PID=$(sed -n 's/^.*+\([0-9]\+\)$/\1/p' ${SESSION_DIR}/rtorrent.lock)
    kill -2 $RT_PID
    # wait until rtorrent exits
    while kill -0 $RT_PID >/dev/null 2>&1; do
      sleep 1
    done
  else
    echo "WARNING: No pid for rtorrent found. Did you set \"session.use_lock.set = yes\" in rtorrent.rc?"
  fi
end script
